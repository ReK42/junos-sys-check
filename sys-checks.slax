version 1.1;
/*
************************************************
This script is an op script that displays a snapshot of the most relevant information about the router,
it's operational status and the status of major protocols and interfaces.
It's set up in modular way so that you can add/remove a template and call function in the match /
Feel free to email me at gwhite@charter.ca with questions or comments.
************************************************
* To run this script it must be installed in   *
* /var/db/scripts/op/ and called snapshot.slax *
* The following configured must be present:    *
* set system scripts op file sys-checks.slax   *
* Type: "op sys-checks" to run it              *
************************************************
*/

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

import "../import/junos.xsl";


match /
{
    <op-script-results>  {
        <output> "-------------------------------------------------------------------------------------------------------";
        <output> "                                       Welcome "_ $user ;
        <output> "-------------------------------------------------------------------------------------------------------";
        <output> "    ** This is the output of the sys_check script for "_ $hostname _" on " _$localtime _ " ** ";
        <output> "-------------------------------------------------------------------------------------------------------";
        call chassis-template();
        <output> "-------------------------------------------------------------------------------------------------------";
        call system-template();
        <output> "-------------------------------------------------------------------------------------------------------";
        call ospf-template();
        <output> "-------------------------------------------------------------------------------------------------------";
        call ldp-template();
        <output> "-------------------------------------------------------------------------------------------------------";
        call rsvp-template();
        <output> "-------------------------------------------------------------------------------------------------------";
        call bgp-template();
        <output> "-------------------------------------------------------------------------------------------------------";
        call vpn-template();
        <output> "-------------------------------------------------------------------------------------------------------";
        call interface-template();
        <output> "-------------------------------------------------------------------------------------------------------";
    }
}

template chassis-template() {

    /* CHASSIS ALARMS */

    var $query0 = { <command> "show chassis alarms"; }
    var $result0 = jcs:invoke($query0);
    <alarm-information> {
        for-each($result0) {
            if ($result0/alarm-detail/alarm-class != "") {
                <output> "CHASSIS:   *** FAIL *** : " _$result0/alarm-detail/alarm-class _" ALARM - " _$result0/alarm-detail/alarm-description;
            }
            else {
                <output> "CHASSIS:   **  PASS  ** : There are no active chassis alarms";
            }
        }
    }

    /* CHASSIS HARDWARE STATUS */

    var $query1 = { <get-environment-information>; }
    var $result1 = jcs:invoke($query1);
    for-each ($result1/environment-item[status!="OK"]) {
        <output> "CHASSIS:   *** FAIL *** : Component - " _ name _ " is " _ status;
        if (comment) { <output> "                          Details: " _ comment;}
        if (temperature) { <output> "                          Temperature: " _ temperature;}
    }
}

template system-template() {

    /* SYSTEM ALARMS */

    var $query10 = { <command> "show system alarms"; }
    var $result10 = jcs:invoke($query10);
    <alarm-information> {
        for-each($result10) {
            if ($result10/alarm-detail/alarm-class != "") {
                <output> "SYSTEM:    *** FAIL *** : " _$result10/alarm-detail/alarm-class _" ALARM - " _$result10/alarm-detail/alarm-description;
            }
            else {
                <output> "SYSTEM:    **  PASS  ** : There are no active system alarms";
            }
        }
    }

    /* SYSTEM UPTIME AND USERS */

    var $query20 = { <command> "show system users"; }
    var $result20 = jcs:invoke($query20);
    if ($result20/multi-routing-engine-item) {
        for-each ($result20/multi-routing-engine-item) {
            <output> "SYSTEM:    *   INFO   * : System (" _ re-name _ ") Uptime is " _ system-users-information/uptime-information/up-time;
            for-each (./system-users-information/uptime-information/user-table/user-entry) {
                <output> "SYSTEM:    *   INFO   * : " _ user _" is currently logged in from " _ from _" since " _ login-time;
            }
        }
    }
    else {
        <system-users-information> {
            <output> "SYSTEM:    *   INFO   * : System Uptime is " _$result20/uptime-information/up-time;
            for-each ($result20/uptime-information/user-table/user-entry) {
                <output> "SYSTEM:    *   INFO   * : " _ user _" is currently logged in from " _ from _" since " _ login-time;
            }
        }
    }

    /* SYSTEM LAST COMMIT */

    var $query30 = { <command> "show system commit"; }
    var $result30 = jcs:invoke($query30);
    <commit-information> {
        <output> "SYSTEM:    *   INFO   * : Last commit was " _$result30/commit-history/date-time _" by: " _$result30/commit-history/user;
    }

    /* SYSTEM VERSION */

    var $query40 = { <command> "show version"; }
    var $result40 = jcs:invoke($query40);
    if ($result40/multi-routing-engine-item) {
        for-each ($result40/multi-routing-engine-item) {
            <output> "SYSTEM:    *   INFO   * : " _ //host-name _ "("_ //re-name _") is a " _ //product-model _ " running " _ //junos-version;
        }
    }
    else {
        <software-information> {
            <output> "SYSTEM:    *   INFO   * : " _$hostname _ " is a " _$product _ " running " _$result40/junos-version;
        }
    }

    /* ROUTING-ENGINE-STATUS */

    var $query45 = { <command> "show chassis routing-engine"; }
    var $result45 = jcs:invoke($query45);

    for-each ($result45/route-engine) {
        if ((mastership-state!="master") && (mastership-state!="backup")) {
            <output> "SYSTEM:    *** FAIL *** : RE" _ slot _ " is not OK";
        }
        if ((slot=="0") && (status=="OK")) {
            <output> "SYSTEM:    *   INFO   * : RE0 is " _ status _ " and " _ mastership-state _ " and has been up for " _ up-time _ " since " _ last-reboot-reason;
        }
        if ((slot=="1") && (status=="OK")) {
            <output> "SYSTEM:    *   INFO   * : RE1 is " _ status _ " and " _ mastership-state _ " and has been up for " _ up-time _ " since " _ last-reboot-reason;
        }
        if (cpu-temperature>="65") { <output> "SYSTEM:    **  WARN  ** : System temperature high!!! ("_ cpu-temperature _")."; }
        if ((cpu-idle<="50") || (load-average-fifteen>=0.75)) {
            <output> "SYSTEM:    **  WARN  ** : System load is high!!! (User: "_ cpu-user _"% System: "_ cpu-system _"% Background: "_ cpu-background _"%)";
        }
    }

    /* LICENSE CHECK */

    var $query46 = {
        <get-license-summary-information>;
    }
    var $result46 = jcs:invoke($query46);
    for-each ($result46/license-usage-summary/feature-summary) {
        if (validity-type=="invalid") {
            <output> "SYSTEM:    *** FAIL *** : The feature license " _ name _ " is " _ validity-type;
        }
        if (used-licensed>licensed) {
            <output> "SYSTEM:    *** FAIL *** : The feature license " _ name _ " is oversubscribed!";
        }
    }
}

/******************** END OF TEMPLATE *********************/


template ldp-template() {

    /* LDP-NEIGHBORS-UP-COUNT */

    var $query50 = {
        <get-ldp-interface-information>;
    }
    var $ldp-interface = jcs:invoke($query50);
    var $result50 = count($ldp-interface/ldp-interface[ldp-neighbor-count=="1"]);
    <output> "LDP:       **  PASS  ** : There are " _$result50 _ " LDP neighbor interfaces UP (inc lo0.0)";

    /* LDP-SESSION-UP-COUNT */

    var $query55 = {
        <get-ldp-session-information>;
    }
    var $result55 = jcs:invoke($query55);
    var $count55 = count($result55/ldp-session[ldp-session-state=="Operational"]);
    <output> "LDP:       **  PASS  ** : There are "_$count55 _ " neighbor sessions UP";

    /* LDP-NEIGHBOR-DOWN-IDENTIFICATION */

    var $query60 = { <command> "show ldp interface"; }
    var $result60 = jcs:invoke($query60);
    <ldp-interface-information> {
        for-each($result60/ldp-interface) {
            if (ldp-neighbor-count=="0") {
                <output> "LDP:       *** FAIL *** : Interface " _ interface-name _" has zero neighbors";
            }
        }
    }
}

/******************** END OF TEMPLATE *********************/

template ospf-template() {

    /* OSPF-NEIGHBORS-UP-COUNT */

    var $query70 = {
        <get-ospf-neighbor-information>;
    }
    var $result70 = jcs:invoke($query70);
    var $count70 = count($result70/ospf-neighbor[ospf-neighbor-state=="Full"]);
    <output> "OSPF:      **  PASS  ** : There are "_$count70 _ " OSPF neighbor sessions UP";

    /* OSPF-NEIGHBOR-DOWN-IDENTIFICATION */

    var $query80 = { <command> "show ospf interface"; }
    var $result80 = jcs:invoke($query80);
    <ospf-interface-information> {
        for-each($result80/ospf-interface) {
            if ((neighbor-count=="0") && (interface-name!="lo0.0")) {
                <output> "OSPF:      *** FAIL *** : Neighbor session configured on " _ interface-name _" is DOWN";
            }
        }
    }
}

/******************** END OF TEMPLATE *********************/

template rsvp-template() {

    /* RSVP-NEIGHBORS-UP-COUNT */

    var $query90 = {
        <get-rsvp-interface-information>;
    }
    var $result90 = jcs:invoke($query90);
    var $count90 = count($result90/rsvp-interface[rsvp-status="Up"]);
    <output> "RSVP:      **  PASS  ** : There are "_$count90 _ " RSVP interfaces UP";

    /* RSVP-LSP's */

    var $query95 = {
        <get-mpls-lsp-information>;
    }
    var $result95 = jcs:invoke($query95);
    for-each ($result95/rsvp-session-data[session-type=="Ingress"]) {
        <output> "RSVP:      *   INFO   * : There are " _ count _ " Egress-LSPs Operational";
    }
    for-each ($result95/rsvp-session-data[session-type=="Egress"]) {
        <output> "RSVP:      *   INFO   * : There are " _ count _ " Ingress-LSPs Operational";
    }

    /* RSVP-NEIGHBOR-DOWN-IDENTIFICATION */

    var $query100 = { <command> "show rsvp interface"; }
    var $result100 = jcs:invoke($query100);
    <rsvp-interface-information> {
        for-each($result100/rsvp-interface) {
            if ((rsvp-status=="Down") && (interface-name!="lo0.0")) {
                <output> "RSVP:      *** FAIL *** : Neighbor session configured on " _ interface-name _" is DOWN";
            }
        }
    }
}

/******************** END OF TEMPLATE *********************/

template bgp-template() {

    /* BGP-NEIGHBORS-UP-COUNT */

    var $query110 = {
        <get-bgp-summary-information>;
    }
    var $result110 = jcs:invoke($query110);
    var $count110 = count($result110/bgp-peer[peer-state=="Established"]);
    <output> "BGP:       **  PASS  ** : There are "_$count110 _ " BGP neighbor sessions UP";

    /* BGP-NEIGHBOR-DOWN-IDENTIFICATION */

    var $query120 = { <command> "show bgp summary"; }
    var $result120 = jcs:invoke($query120);
    <bgp-information> {
        for-each($result120/bgp-peer[peer-state!="Established"]) {
            <output> "BGP:       *** FAIL *** : Peer " _ description _" @ " _ peer-address _" is DOWN";
        }
    }
}

/******************** END OF TEMPLATE *********************/

template vpn-template() {

    /* VPN-TUNNEL-UP-COUNT */

    var $query140 = {
        <get-security-associations-information>;
    }
    var $result140 = jcs:invoke($query140);
    <ipsec-security-associations-information> {
        if($result140/total-active-tunnels != 0) {
            <output> "VPN:       **  PASS  ** : There are "_ total-active-tunnels _ " VPN tunnels UP";
        }
    }

    /* VPN-TUNNEL-DOWN-IDENTIFICATION */

    var $query141 = {
        <get-inactive-tunnels>;
    }
    var $query142 = {
        <get-inactive-tunnels> {
            <detail>;
        }
    }
    var $result141 = jcs:invoke($query141);
    var $result142 = jcs:invoke($query142);
    <ipsec-unestablished-tunnel-information> {
        if($result141/total-inactive-tunnels != 0) {
            for-each($result142/ipsec-security-associations-block) {
                <output> "VPN:       *** FAIL *** : Tunnel " _ sa-vpn-name _" @ " _ sa-remote-gateway _" is DOWN";
                <output> "                          Reason: " _ sa-ipsec-tunnel-events/sa-tunnel-event;
            }
        }
    }
}

/******************** END OF TEMPLATE *********************/

template interface-template() {

    /* CONFIGURED INTERFACES IN UP/DOWN STATE */

    mvar $test130 = "PASS";
    var $rpc-config-req = <get-configuration database="committed" inherit="inherit">;
    var $configuration = jcs:invoke($rpc-config-req);
    for-each($configuration/interfaces/interface) {
        var $name130 = name;
        var $query131 = {
            <get-interface-information> {
                <terse>;
                if ($name130) {
                    <interface-name> $name130;
                }
            }
        }
        var $result131 = jcs:invoke($query131);
        <interface-information> {
            for-each ($result131/physical-interface/logical-interface) {
                if ((admin-status=="up") && (oper-status=="down")) {
                    <output> "INTERFACE: *** FAIL *** : Configured interface " _ name _" is Admin Up but Operationally DOWN";
                    set $test130 = "FAIL";
                }
            }
        }
    }
    if ($test130=="PASS") {
        <output> "INTERFACE: *   PASS   * : All Configured interfaces appear to be UP";
    }
}

/******************** END OF TEMPLATE *********************/